{"version":3,"sources":["components/Header/Header.js","components/PostWrapper/PostWrapper.js","components/Navigate/Navigate.js","components/Post/Post.js","components/CommentList/CommentList.js","components/Comment/Comment.js","components/Warning/Warning.js","services/post.js","containers/PostContainer/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","PostWrapper","children","Navigate","onClick","postId","disabled","Button","color","content","icon","labelPosition","Post","props","state","postInfo","title","body","comments","animate","direction","nextProps","this","setState","setTimeout","animation","Component","CommentList","commentList","map","comment","index","name","split","key","Comment","Warning","closing","visible","message","getPost","axios","get","getComments","PostContainer","showWarning","warningVisibility","fetchPostInfo","a","fetching","Promise","all","service","info","data","post","handleNavigateClick","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.006d87f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n    <div className=\"Header\">\r\n        POSTS\r\n    </div>\r\n)\r\n\r\nexport default Header;","import React from 'react';\r\nimport './PostWrapper.css';\r\n\r\nconst PostWrapper = ({ children }) => {\r\n    return (\r\n        <div className=\"PostWrapper\">\r\n            { children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostWrapper;","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport './Navigate.css';\r\n\r\nconst Navigate = ({ onClick, postId, disabled }) => {\r\n    return (\r\n        <div className=\"Navigate\">\r\n            <Button\r\n                color=\"teal\"\r\n                content=\"Prev\"\r\n                icon=\"left arrow\"\r\n                labelPosition=\"left\"\r\n                className=\"Navigate-left-button\"\r\n                onClick = {\r\n                    () => onClick('PREV')\r\n                }\r\n                disabled={disabled}\r\n            />\r\n            <div className=\"Navigate-page-num\">{postId}</div>\r\n            <Button\r\n                color=\"teal\"\r\n                content=\"Next\"\r\n                icon=\"right arrow\"\r\n                labelPosition=\"right\"\r\n                className=\"Navigate-right-button\"\r\n                onClick = {\r\n                    () => onClick('NEXT')\r\n                }\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Navigate;","import React, {Component} from 'react';\r\nimport './Post.css';\r\nimport { CommentList } from '../';\r\n\r\nclass Post extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            postInfo: {\r\n                title: null,\r\n                body: null,\r\n                comments: []\r\n            },\r\n            animate: false,\r\n            direction: 'left'\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps (nextProps) {\r\n            \r\n        const { title, body, comments } = nextProps;\r\n        \r\n        if(this.props.postId !== nextProps.postId) {\r\n            const direction = this.props.postId < nextProps.postId ? 'left' : 'right';\r\n            \r\n            this.setState({\r\n                direction,\r\n                animate: true\r\n            });\r\n\r\n            setTimeout(\r\n                () => {\r\n                    this.setState({\r\n                        postInfo: {\r\n                            title, body, comments \r\n                        },\r\n                        animate: false\r\n                    })\r\n                }, 500\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            postInfo: {\r\n                title, body, comments \r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { title, body, comments } = this.state.postInfo;\r\n        const { animate, direction } = this.state;\r\n\r\n        const animation = animate \r\n                          ? (direction==='left' ? 'bounceOutLeft' : 'bounceOutRight')\r\n                          : (direction==='left' ? 'bounceInRight' : 'bounceInLeft');\r\n        \r\n        if( title === null ) return null;\r\n\r\n        return (\r\n            <div className={`Post animated ${animation}`}>\r\n                <h1>{title}</h1>\r\n                <p>\r\n                    {body}\r\n                </p>\r\n                <CommentList comments={comments}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport './CommentList.css';\r\nimport { Comment } from '../';\r\n\r\n\r\nconst CommentList = ({ comments }) => {\r\n    const commentList = comments.map(\r\n        (comment, index) => (\r\n            <Comment\r\n                name={comment.name.split('@')[0]}\r\n                body={comment.body}\r\n                key={index}\r\n            />\r\n        )\r\n    );\r\n\r\n    return (\r\n        <ul className=\"CommentList\">\r\n            {commentList}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default CommentList;\r\n","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = ({ name, body }) => {\r\n    return (\r\n        <li className=\"Comment\">\r\n            <p><strong>{name}</strong>{body}</p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Comment;","import React, {Component} from 'react';\r\nimport \"./Warning.css\";\r\n\r\nclass Warning extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            closing: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps (nextProps) {\r\n        if(this.props.visible && !nextProps.visible) {\r\n           \r\n           this.setState({\r\n               closing: true\r\n           });\r\n\r\n           setTimeout(\r\n               () => {\r\n                   this.setState({\r\n                       closing: false\r\n                   });\r\n               }, 1000\r\n           );\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { visible, message } = this.props;\r\n        const { closing } = this.state;\r\n\r\n        if(!visible && !closing) return null;\r\n        return (\r\n            <div className=\"Warning-wrapper\">\r\n                <div className={`Warning ${closing?'bounceOut':'bounceIn'} animated`}>\r\n                    {message}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Warning;","\r\nimport axios from 'axios';\r\n\r\nexport function getPost(postId) {\r\n    return axios.get('https://jsonplaceholder.typicode.com/posts/' + postId);\r\n}\r\n\r\nexport function getComments(postId) {\r\n    return axios.get('https://jsonplaceholder.typicode.com/posts/' + postId + '/comments')\r\n}","import React, { Component } from 'react';\r\nimport { PostWrapper, Navigate, Post, Warning } from '../../components';\r\nimport * as service from '../../services/post';\r\n\r\n\r\nclass PostContainer extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n\r\n        this.state = {\r\n            postId: 1,\r\n            fetching: false,\r\n            post : {\r\n                title : null,\r\n                body: null\r\n            },\r\n            comments : [],\r\n            warningVisibility: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPostInfo(1);\r\n    }\r\n\r\n    showWarning = () => {\r\n        this.setState({\r\n            warningVisibility : true\r\n        });\r\n\r\n        setTimeout(\r\n            () => {\r\n                this.setState({\r\n                    warningVisibility : false\r\n                });\r\n            }, 1500\r\n        );\r\n    }\r\n\r\n    fetchPostInfo = async ( postId ) => {\r\n\r\n        this.setState({\r\n            fetching: true\r\n        });\r\n\r\n        try {\r\n            const info = await Promise.all([\r\n                service.getPost(postId),\r\n                service.getComments(postId)\r\n            ]);\r\n    \r\n            const { title, body } = info[0].data;\r\n            const comments = info[1].data;\r\n        \r\n            this.setState({\r\n                postId,\r\n                post : {\r\n                    title,\r\n                    body\r\n                },\r\n                comments,\r\n                fetching: false\r\n            });\r\n        } catch(e) {\r\n            this.setState({\r\n                fetching: false\r\n            });\r\n            this.showWarning();\r\n        }\r\n\r\n    }\r\n\r\n    handleNavigateClick = (type) => {\r\n        const postId = this.state.postId;\r\n\r\n        if(type === 'NEXT') {\r\n            this.fetchPostInfo(postId+1);\r\n        } else {\r\n            this.fetchPostInfo(postId-1);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {postId, fetching, post, comments, warningVisibility} = this.state;\r\n\r\n        return (\r\n            <PostWrapper>\r\n                <Navigate \r\n                    postId={postId}\r\n                    disabled={fetching}\r\n                    onClick={this.handleNavigateClick}\r\n                />\r\n                <Post\r\n                    title={post.title}\r\n                    body={post.body}\r\n                    comments={comments}\r\n                />\r\n                <Warning visible={warningVisibility} message=\"That post does not exist\" />\r\n            </PostWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostContainer;","import React, { Component } from 'react';\nimport { Header } from './components';\nimport { PostContainer } from './containers';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <PostContainer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport './Animation.css';\nimport 'es6-promise/auto';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}